<?php

namespace Plugin\ApgProductClassImage\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Eccube\Application;
use Plugin\ApgProductClassImage\Entity\ProductClassImageSetting;

/**
 * ProductClassImageSettingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductClassImageSettingRepository extends EntityRepository
{

    const CACHE_KEY = "cache_product_class_image_settings::getOrNew";

    /**
     * @var \Eccube\Application
     */
    protected $app;

    public function setApplication(Application $app)
    {
        $this->app = $app;
    }

    public function getOrNew($id = 1)
    {
        $options = $this->app['config']['doctrine_cache'];
        if (isset($options['result_cache']['lifetime'])) {
            $lifetime = $options['result_cache']['lifetime'];
        } else {
            $lifetime = 3600;
        }

        $qb = $this->createQueryBuilder('b')
            ->where('b.id = :id')
            ->setParameter('id', $id);

        $recode = $qb->getQuery()
            ->useResultCache(true, $lifetime, self::CACHE_KEY)
            ->getOneOrNullResult();
        return empty($recode) ? new ProductClassImageSetting() : $recode;

    }

    public function save(ProductClassImageSetting $entity)
    {
        /** @var EntityManager $em */
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $id = $entity->getId();
            if (empty($id)) {
                $entity->setId(1);  // default:1
            }
            $em->persist($entity);
            $em->flush();
            $em->getConnection()->commit();
            $cacheImpl = $em->getConfiguration()->getResultCacheImpl();
            if (!empty($cacheImpl)) {
                $cacheImpl->delete(self::CACHE_KEY);
            }
        } catch (\Exception $e) {
            $em->getConnection()->rollback();
            return false;
        }

        return true;
    }
}
